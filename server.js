// Generated by CoffeeScript 1.10.0
(function() {
  var LocalStrategy, Project, ProjectSchema, Schema, UserSchema, app, bodyParser, corser, crypto, express, flash, getHash, mongoose, passport, session;

  express = require("express");

  mongoose = require("mongoose");

  passport = require("passport");

  flash = require("connect-flash");

  session = require("express-session");

  crypto = require("crypto");

  bodyParser = require("body-parser");

  app = express();

  corser = require('corser');

  app.use(corser.create());

  app.use(bodyParser());

  app.use(bodyParser.urlencoded({
    extended: true
  }));

  app.use(bodyParser.json());

  app.use(session({
    secret: '123jh4536kj63szd43asd3'
  }));

  app.use(flash());

  app.use(passport.initialize());

  app.use(passport.session());

  LocalStrategy = require("passport-local").Strategy;

  Schema = mongoose.Schema;

  UserSchema = new Schema({
    username: String,
    password: String,
    projects: Schema.Types.Mixed
  }, {
    strict: false
  });

  ProjectSchema = new Schema({
    name: String,
    owner: String,
    element: Schema.Types.Mixed,
    cards: Schema.Types.Mixed,
    config: Schema.Types.Mixed,
    sourceCode: String
  }, {
    strict: false
  });

  mongoose.connect('mongodb://localhost/croset');

  Project = mongoose.model('Project', ProjectSchema);

  passport.use(new LocalStrategy({
    usernameField: "username",
    passwordField: "password",
    passReqToCallback: true
  }, function(req, name, password, done) {
    return process.nextTick(function() {
      var User;
      User = mongoose.model("User", UserSchema);
      return User.findOne({
        username: name
      }, function(err, user) {
        var hashedPassword;
        if (err) {
          return done(err);
        }
        if (!user) {
          req.flash("error", "ユーザーが見つかりませんでした。");
          req.flash("input_id", name);
          req.flash("input_password", password);
          return done(null, false);
        }
        hashedPassword = getHash(password);
        if (user.password !== hashedPassword && user.password !== password) {
          req.flash("error", "パスワードが間違っています。");
          req.flash("input_id", name);
          req.flash("input_password", password);
          return done(null, false);
        }
        return done(null, user);
      });
    });
  }));

  getHash = function(value) {
    var sha;
    sha = crypto.createHmac("sha256", "secretKey");
    sha.update(value);
    return sha.digest("hex");
  };

  passport.serializeUser(function(user, done) {
    return done(null, user.id);
  });

  passport.deserializeUser(function(serializedAccount, done) {
    var User;
    User = mongoose.model("User", UserSchema);
    return User.findOne({
      "id": serializedAccount
    }, function(err, user) {
      return done(err, user.id);
    });
  });

  app.use(express["static"]("public"));

  app.post("/project", function(req, res) {
    var project;
    project = new Project();
    project.name = "aaa";
    return Project.update({
      name: req.body.name
    }, req.body, {
      upsert: true
    }, function(err) {
      return console.log(err);
    });
  });

  app.get("/project", function(req, res) {
    return Project.find(req.query.name, function(err, docs) {
      return res.send(docs[0]);
    });
  });

  app.get("/projects", function(req, res) {
    return Project.find(req.query.name, function(err, docs) {
      res.send(docs);
      return console.log("multi");
    });
  });

  app.get("/login", function(req, res) {
    console.log("Error", {
      user: req.user,
      message: req.flash("error")
    });
    return res.send(req.flash("error"));
  });

  app.post("/login", function(req, res, next) {
    console.log(req);
    return passport.authenticate("local", {
      successRedirect: "/#/dashboard",
      failureRedirect: "/login",
      failureFlash: true
    })(req, res, next);
  });

  app.get("/logout", function(req, res) {
    req.logout();
    return res.redirect("/");
  });

  app.listen(3000, function() {
    return console.log("Server running at port 3000!");
  });

}).call(this);
