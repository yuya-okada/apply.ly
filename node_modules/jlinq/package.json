{
  "name": "jlinq",
  "version": "1.0.0",
  "description": "A node compatible fork/branch of: https://github.com/hugoware/jlinq-beta, a total jscript implementation of LINQ",
  "main": "./lib/jlinq.js",
  "scripts": {
    "test": "node ./test/test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/nikmartin/jlinq-beta/tree/jlinq-node"
  },
  "keywords": [
    "jlinq",
    "LINQ"
  ],
  "author": {
    "name": "Nik Martin"
  },
  "license": "http://creativecommons.org/licenses/by/3.0/",
  "readme": "# jlinq\n## WHAT: \nA node-usable version of https://github.com/hugoware/jlinq-beta\nIf you can do it in LINQ, you *should* be able to do it in jlinq\n\nLanguage Integrated Query (LINQ, pronounced \"link\") is a Microsoft \n.NET Framework component that adds native data querying capabilities\nto .NET languages.  LINQ defines a set of method names (called standard \nquery operators, or standard sequence operators), along with translation\nrules from so-called query expressions to expressions using these method \nnames, lambda expressions and anonymous types. These can, for example, \nbe used to project and filter data into arrays, enumerable classes, XML \n(LINQ to XML), relational databases, and third party data sources. \n\n## WHO:\n* Original Author: Hugo Bonacci - hugoware.com\n\n* Modified for Node by: Nik Martin - nikmartin.com\n\nIt should work fine, report bugs on github.\n\n",
  "readmeFilename": "README.md",
  "_id": "jlinq@1.0.0",
  "dist": {
    "shasum": "63d60ad3b86220138af2a93584c177a70479d782"
  },
  "_from": "jlinq@",
  "_resolved": "https://registry.npmjs.org/jlinq/-/jlinq-1.0.0.tgz"
}
